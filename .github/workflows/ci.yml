name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr
        sudo apt-get install -y libmagic1

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black ruff

    - name: Lint with ruff
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        ruff check --output-format=github --select=E9,F63,F7,F82 src/
        # Default set of ruff rules with GitHub annotations
        ruff check --output-format=github src/

    - name: Check code formatting with black
      run: |
        black --check --diff src/ tests/

    - name: Run tests with pytest
      env:
        # Set test environment variables
        OPENAI_API_KEY: "test-key"
        PINECONE_API_KEY: "test-key"
        PINECONE_ENVIRONMENT: "test"
        PINECONE_INDEX_NAME: "test-index"
        DISCORD_TOKEN: "test-token"
        BACKEND_API_KEY: "test-backend-key"
      run: |
        pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety

    - name: Run security checks with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -ll

    - name: Check for known security vulnerabilities
      run: |
        safety check --json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create deployment package
      run: |
        # Create a simple deployment package
        mkdir -p dist/
        cp -r src/ dist/
        cp requirements.txt dist/
        cp README.md dist/
        cp LICENSE dist/

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: vita-discord-bot
        path: dist/ 